// <auto-generated />
using System;
using ExamStation.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExamStation.Migrations
{
    [DbContext(typeof(ExamStationDbContext))]
    [Migration("20201028101413_totaloption")]
    partial class totaloption
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ExamStation.Areas.Identity.Data.ExamStationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ExamStation.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionBankId")
                        .HasColumnType("int");

                    b.Property<string>("StudentAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("ExamStation.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClassNumeric")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Class");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassName = "One",
                            ClassNumeric = 1,
                            Note = "Nothing",
                            TeacherName = "Hasan"
                        },
                        new
                        {
                            Id = 2,
                            ClassName = "Two",
                            ClassNumeric = 2,
                            Note = "Nothing",
                            TeacherName = "Rakib"
                        },
                        new
                        {
                            Id = 3,
                            ClassName = "Three",
                            ClassNumeric = 3,
                            Note = "Nothing",
                            TeacherName = "Imran"
                        },
                        new
                        {
                            Id = 4,
                            ClassName = "Four",
                            ClassNumeric = 4,
                            Note = "Nothing",
                            TeacherName = "Masum"
                        },
                        new
                        {
                            Id = 5,
                            ClassName = "Five",
                            ClassNumeric = 5,
                            Note = "Nothing",
                            TeacherName = "Rafi"
                        });
                });

            modelBuilder.Entity("ExamStation.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Photo")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Details = "Eid ul-Azha is an important religious holiday.",
                            Photo = (byte)0,
                            Title = "EidUlAzha"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Details = "Eid ul-Fitr is an important religious holiday.",
                            Photo = (byte)0,
                            Title = "EidUlFitr"
                        });
                });

            modelBuilder.Entity("ExamStation.Models.Instruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Instruction");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Before the Exam, Bring your Student ID Booklet or University Library Card (i.e. 3212****). You will not be allowed into the exam hall",
                            Title = "Exam Instruction For Student 1"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Before the Exam, Bring your Student ID Booklet or University Library Card (i.e. 3212****). You will not be allowed into the exam hall",
                            Title = "Exam Instruction For Student 2"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Before the Exam, Bring your Student ID Booklet or University Library Card (i.e. 3212****). You will not be allowed into the exam hall",
                            Title = "Exam Instruction For Student 3"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Before the Exam, Bring your Student ID Booklet or University Library Card (i.e. 3212****). You will not be allowed into the exam hall",
                            Title = "Exam Instruction For Student 4"
                        },
                        new
                        {
                            Id = 5,
                            Content = "Before the Exam, Bring your Student ID Booklet or University Library Card (i.e. 3212****). You will not be allowed into the exam hall",
                            Title = "Exam Instruction For Student 5"
                        });
                });

            modelBuilder.Entity("ExamStation.Models.MenuMaster", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentID")
                        .HasColumnType("int");

                    b.Property<int>("SerialNo")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("isActive")
                        .HasColumnType("int");

                    b.Property<int>("isAdmin")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("MenuMaster");
                });

            modelBuilder.Entity("ExamStation.Models.Notice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteNotice")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notice");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Programing Contest",
                            WriteNotice = "On 16-07-2020 will held a programming contest in Varsity campus"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Holyday",
                            WriteNotice = "Have a Good Day"
                        });
                });

            modelBuilder.Entity("ExamStation.Models.OnlineExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("ExamStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExamTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExamType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarkType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PassValue")
                        .HasColumnType("float");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Published")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OnlineExam");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Class = "One",
                            Cost = 0.0,
                            Description = "Description Here",
                            Duration = 10,
                            ExamStatus = "One Time",
                            ExamTitle = "Quiz",
                            ExamType = "Only Duration",
                            Instruction = "Exam Instruction For Student 1",
                            MarkType = "40",
                            PassValue = 33.0,
                            PaymentStatus = "Free",
                            Published = "Yes",
                            Section = "A",
                            StudentGroup = "Science",
                            Subject = "Physics"
                        },
                        new
                        {
                            Id = 2,
                            Class = "Two",
                            Cost = 0.0,
                            Description = "Description Here",
                            Duration = 30,
                            ExamStatus = "One Time",
                            ExamTitle = "MCQ",
                            ExamType = "Date and Duration",
                            Instruction = "Exam Instruction For Student 2",
                            MarkType = "40",
                            PassValue = 33.0,
                            PaymentStatus = "Free",
                            Published = "Yes",
                            Section = "B",
                            StudentGroup = "Math",
                            Subject = "Chemistry"
                        },
                        new
                        {
                            Id = 3,
                            Class = "Three",
                            Cost = 0.0,
                            Description = "Description Here",
                            Duration = 10,
                            ExamStatus = "One Time",
                            ExamTitle = "Class Test",
                            ExamType = "Date, Time And Duration",
                            Instruction = "Exam Instruction For Student 3",
                            MarkType = "40",
                            PassValue = 33.0,
                            PaymentStatus = "Free",
                            Published = "Yes",
                            Section = "C",
                            StudentGroup = "Chemistry",
                            Subject = "Math"
                        },
                        new
                        {
                            Id = 4,
                            Class = "Four",
                            Cost = 0.0,
                            Description = "Description Here",
                            Duration = 30,
                            ExamStatus = "One Time",
                            ExamTitle = "Mid Term",
                            ExamType = "Only Duration",
                            Instruction = "Exam Instruction For Student 4",
                            MarkType = "40",
                            PassValue = 33.0,
                            PaymentStatus = "Free",
                            Published = "Yes",
                            Section = "D",
                            StudentGroup = "General Knowledge",
                            Subject = "Biology"
                        },
                        new
                        {
                            Id = 5,
                            Class = "Five",
                            Cost = 0.0,
                            Description = "Description Here",
                            Duration = 10,
                            ExamStatus = "One Time",
                            ExamTitle = "Final",
                            ExamType = "Date and Duration",
                            Instruction = "Exam Instruction For Student 5",
                            MarkType = "40",
                            PassValue = 33.0,
                            PaymentStatus = "Free",
                            Published = "Yes",
                            Section = "E",
                            StudentGroup = "Computer Science",
                            Subject = "English"
                        });
                });

            modelBuilder.Entity("ExamStation.Models.Parent", b =>
                {
                    b.Property<int>("GuardianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherProfession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherProfession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GuardianId");

                    b.ToTable("Parent");

                    b.HasData(
                        new
                        {
                            GuardianId = 1,
                            Address = "Islambagh",
                            Email = "siddik100@gmail.com",
                            FatherName = "Abu Siddik",
                            FatherProfession = "Teacher",
                            GuardianName = "Abu Siddik",
                            MotherName = "MST Ruma",
                            MotherProfession = "Teacher",
                            Phone = 115847895,
                            Photo = "d5a3b4f1-faad-48a5-b438-8109d1f9be69_hasan.jpg"
                        },
                        new
                        {
                            GuardianId = 2,
                            Address = "Islambagh",
                            Email = "siddik100@gmail.com",
                            FatherName = "Abu Siddik",
                            FatherProfession = "Teacher",
                            GuardianName = "Ruma",
                            MotherName = "MST Ruma",
                            MotherProfession = "Teacher",
                            Phone = 115847895,
                            Photo = "d5a3b4f1-faad-48a5-b438-8109d1f9be69_hasan.jpg"
                        },
                        new
                        {
                            GuardianId = 3,
                            Address = "Islambagh",
                            Email = "siddik100@gmail.com",
                            FatherName = "Abu Siddik",
                            FatherProfession = "Teacher",
                            GuardianName = "Kamrunnahar",
                            MotherName = "MST Ruma",
                            MotherProfession = "Teacher",
                            Phone = 115847895,
                            Photo = "d5a3b4f1-faad-48a5-b438-8109d1f9be69_hasan.jpg"
                        },
                        new
                        {
                            GuardianId = 4,
                            Address = "Dhaka",
                            Email = "jewel100@gmail.com",
                            FatherName = "Jewel",
                            FatherProfession = "Software Engineer",
                            GuardianName = "Jewel",
                            MotherName = "Shimu",
                            MotherProfession = "Teacher",
                            Phone = 115847895,
                            Photo = "d5a3b4f1-faad-48a5-b438-8109d1f9be69_hasan.jpg"
                        },
                        new
                        {
                            GuardianId = 5,
                            Address = "Dhaka",
                            Email = "jewel100@gmail.com",
                            FatherName = "Zaman",
                            FatherProfession = "Software Engineer",
                            GuardianName = "Zaman",
                            MotherName = "MST Shimu",
                            MotherProfession = "Teacher",
                            Phone = 115847895,
                            Photo = "d5a3b4f1-faad-48a5-b438-8109d1f9be69_hasan.jpg"
                        });
                });

            modelBuilder.Entity("ExamStation.Models.QuestionBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DifficultyLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Mark")
                        .HasColumnType("float");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuestionGroupId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Upload")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionGroupId");

                    b.ToTable("QuestionBank");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DifficultyLevelId = 1,
                            Explanation = "a programmable electronic device designed to accept data, perform prescribed mathematical and logical operations at high speed, and display the results of these operations.",
                            Hints = "Nothing",
                            Mark = 40.0,
                            Question = "What is Computer",
                            QuestionType = "Single Answer"
                        },
                        new
                        {
                            Id = 2,
                            DifficultyLevelId = 1,
                            Explanation = "a programmable electronic device designed to accept data, perform prescribed mathematical and logical operations at high speed, and display the results of these operations.",
                            Hints = "Nothing",
                            Mark = 40.0,
                            Question = "What is Computer Describe it",
                            QuestionType = "Single Answer"
                        },
                        new
                        {
                            Id = 3,
                            DifficultyLevelId = 2,
                            Explanation = "a programmable electronic device designed to accept data, perform prescribed mathematical and logical operations at high speed, and display the results of these operations.",
                            Hints = "Nothing",
                            Mark = 40.0,
                            Question = "What is Math",
                            QuestionType = "Multi Answer"
                        },
                        new
                        {
                            Id = 4,
                            DifficultyLevelId = 2,
                            Explanation = "a programmable electronic device designed to accept data, perform prescribed mathematical and logical operations at high speed, and display the results of these operations.",
                            Hints = "Nothing",
                            Mark = 40.0,
                            Question = "What is Math Describe it",
                            QuestionType = "Multi Answer"
                        },
                        new
                        {
                            Id = 5,
                            DifficultyLevelId = 3,
                            Explanation = "a programmable electronic device designed to accept data, perform prescribed mathematical and logical operations at high speed, and display the results of these operations.",
                            Hints = "Nothing",
                            Mark = 40.0,
                            Question = "What is Chemistry",
                            QuestionType = "Fill In The Blanks"
                        },
                        new
                        {
                            Id = 6,
                            DifficultyLevelId = 3,
                            Explanation = "a programmable electronic device designed to accept data, perform prescribed mathematical and logical operations at high speed, and display the results of these operations.",
                            Hints = "Nothing",
                            Mark = 40.0,
                            Question = "What is Chemistry Describe it",
                            QuestionType = "Fill In The Blanks"
                        },
                        new
                        {
                            Id = 7,
                            DifficultyLevelId = 4,
                            Explanation = "a programmable electronic device designed to accept data, perform prescribed mathematical and logical operations at high speed, and display the results of these operations.",
                            Hints = "Nothing",
                            Mark = 40.0,
                            Question = "What is General Knowledge",
                            QuestionType = "Single Answer"
                        },
                        new
                        {
                            Id = 8,
                            DifficultyLevelId = 4,
                            Explanation = "a programmable electronic device designed to accept data, perform prescribed mathematical and logical operations at high speed, and display the results of these operations.",
                            Hints = "Nothing",
                            Mark = 40.0,
                            Question = "What is General Knowledge Describe it",
                            QuestionType = "Single Answer"
                        },
                        new
                        {
                            Id = 9,
                            DifficultyLevelId = 1,
                            Explanation = "a programmable electronic device designed to accept data, perform prescribed mathematical and logical operations at high speed, and display the results of these operations.",
                            Hints = "Nothing",
                            Mark = 40.0,
                            Question = "What is Computer Science",
                            QuestionType = "Multi Answer"
                        },
                        new
                        {
                            Id = 10,
                            DifficultyLevelId = 1,
                            Explanation = "a programmable electronic device designed to accept data, perform prescribed mathematical and logical operations at high speed, and display the results of these operations.",
                            Hints = "Nothing",
                            Mark = 40.0,
                            Question = "What is Computer Science Describe it",
                            QuestionType = "Multi Answer"
                        });
                });

            modelBuilder.Entity("ExamStation.Models.QuestionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionGroup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Science"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Math"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Chemistry"
                        },
                        new
                        {
                            Id = 4,
                            Title = "General Knowledge"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Computer Science"
                        });
                });

            modelBuilder.Entity("ExamStation.Models.QuestionLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionLevel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Easy"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Very Easy"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Hard"
                        });
                });

            modelBuilder.Entity("ExamStation.Models.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QuestionTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionType");
                });

            modelBuilder.Entity("ExamStation.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Section");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 40,
                            Category = "A",
                            Class = "One",
                            Note = "Nothing",
                            SectionName = "A",
                            TeacherName = "Hasan"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 40,
                            Category = "B",
                            Class = "Two",
                            Note = "Nothing",
                            SectionName = "B",
                            TeacherName = "Rakib"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 40,
                            Category = "C",
                            Class = "Three",
                            Note = "Nothing",
                            SectionName = "C",
                            TeacherName = "Imran"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 40,
                            Category = "D",
                            Class = "Four",
                            Note = "Nothing",
                            SectionName = "D",
                            TeacherName = "Masum"
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 40,
                            Category = "E",
                            Class = "Five",
                            Note = "Nothing",
                            SectionName = "E",
                            TeacherName = "Rafi"
                        });
                });

            modelBuilder.Entity("ExamStation.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraActivities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guardian")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionalSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegisterNo")
                        .HasColumnType("int");

                    b.Property<string>("Religion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Roll")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.ToTable("Student");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            BloodGroup = "B-",
                            Class = "One",
                            Country = "Bangladesh",
                            DateOfBirth = new DateTime(2002, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "saif100@gmail.com",
                            ExtraActivities = "Nothing",
                            Gender = "Male",
                            Group = "Science",
                            Guardian = "Abu Siddik",
                            OptionalSubject = "",
                            Phone = 1548959585,
                            Photo = "d5a3b4f1-faad-48a5-b438-8109d1f9be69_hasan.jpg",
                            RegisterNo = 1010,
                            Religion = "Muslim",
                            Remarks = "Student-1",
                            Roll = 1,
                            Section = "A",
                            State = "Islambagh",
                            StudentName = "Saif"
                        },
                        new
                        {
                            StudentId = 2,
                            BloodGroup = "A+",
                            Class = "Two",
                            Country = "Bangladesh",
                            DateOfBirth = new DateTime(2006, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "asif100@gmail.com",
                            ExtraActivities = "Nothing",
                            Gender = "Male",
                            Group = "Computer Science",
                            Guardian = "Ruma",
                            OptionalSubject = "",
                            Phone = 154895896,
                            Photo = "d5a3b4f1-faad-48a5-b438-8109d1f9be69_hasan.jpg",
                            RegisterNo = 1011,
                            Religion = "Muslim",
                            Remarks = "Student-2",
                            Roll = 2,
                            Section = "B",
                            State = "Islambagh",
                            StudentName = "Asif"
                        },
                        new
                        {
                            StudentId = 3,
                            BloodGroup = "AB+",
                            Class = "Three",
                            Country = "Bangladesh",
                            DateOfBirth = new DateTime(2011, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "musa100@gmail.com",
                            ExtraActivities = "Nothing",
                            Gender = "Male",
                            Group = "General Knowledge",
                            Guardian = "Kamrunnahar",
                            OptionalSubject = "",
                            Phone = 168548958,
                            Photo = "d5a3b4f1-faad-48a5-b438-8109d1f9be69_hasan.jpg",
                            RegisterNo = 1012,
                            Religion = "Muslim",
                            Remarks = "Student-3",
                            Roll = 3,
                            Section = "C",
                            State = "Islambagh",
                            StudentName = "Musa"
                        },
                        new
                        {
                            StudentId = 4,
                            BloodGroup = "A-",
                            Class = "Four",
                            Country = "Bangladesh",
                            DateOfBirth = new DateTime(2011, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "saad100@gmail.com",
                            ExtraActivities = "Nothing",
                            Gender = "Male",
                            Group = "Math",
                            Guardian = "Jewel",
                            OptionalSubject = "",
                            Phone = 198758485,
                            Photo = "d5a3b4f1-faad-48a5-b438-8109d1f9be69_hasan.jpg",
                            RegisterNo = 1013,
                            Religion = "Muslim",
                            Remarks = "Student-4",
                            Roll = 1,
                            Section = "D",
                            State = "Dhaka",
                            StudentName = "Saad"
                        },
                        new
                        {
                            StudentId = 5,
                            BloodGroup = "B+",
                            Class = "Five",
                            Country = "Bangladesh",
                            DateOfBirth = new DateTime(2018, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayisha100@gmail.com",
                            ExtraActivities = "Nothing",
                            Gender = "Female",
                            Group = "Chemistry",
                            Guardian = "Zaman",
                            OptionalSubject = "",
                            Phone = 178458723,
                            Photo = "d5a3b4f1-faad-48a5-b438-8109d1f9be69_hasan.jpg",
                            RegisterNo = 1014,
                            Religion = "Muslim",
                            Remarks = "Student-5",
                            Roll = 4,
                            Section = "E",
                            State = "Dhaka",
                            StudentName = "Ayisha"
                        });
                });

            modelBuilder.Entity("ExamStation.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalMark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassMark")
                        .HasColumnType("int");

                    b.Property<string>("SubjectAuthor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subject");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassName = "One",
                            FinalMark = "40",
                            PassMark = 33,
                            SubjectAuthor = "Mark Wood",
                            SubjectCode = "1122",
                            SubjectName = "Physics",
                            TeacherName = "Hasan",
                            Type = "Optional"
                        },
                        new
                        {
                            Id = 2,
                            ClassName = "Two",
                            FinalMark = "40",
                            PassMark = 33,
                            SubjectAuthor = "Jogn",
                            SubjectCode = "1123",
                            SubjectName = "Chemistry",
                            TeacherName = "Rakib",
                            Type = "Mandatory"
                        },
                        new
                        {
                            Id = 3,
                            ClassName = "Three",
                            FinalMark = "40",
                            PassMark = 33,
                            SubjectAuthor = "Clark",
                            SubjectCode = "1124",
                            SubjectName = "Math",
                            TeacherName = "Imran",
                            Type = "Optional"
                        },
                        new
                        {
                            Id = 4,
                            ClassName = "Four",
                            FinalMark = "40",
                            PassMark = 33,
                            SubjectAuthor = "Barry",
                            SubjectCode = "1125",
                            SubjectName = "Biology",
                            TeacherName = "Masum",
                            Type = "Mandatory"
                        },
                        new
                        {
                            Id = 5,
                            ClassName = "Five",
                            FinalMark = "40",
                            PassMark = 33,
                            SubjectAuthor = "Allen",
                            SubjectCode = "1126",
                            SubjectName = "English",
                            TeacherName = "Rafi",
                            Type = "Optional"
                        });
                });

            modelBuilder.Entity("ExamStation.Models.TakeExamMapper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionBankId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TakeExamMapper");
                });

            modelBuilder.Entity("ExamStation.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeacherId");

                    b.ToTable("Teacher");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            Address = "Islambagh",
                            DateOfBirth = new DateTime(1997, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Designation = "Software Engineer",
                            Email = "hasan100@gmail.com",
                            Gender = "Male",
                            JoiningDate = new DateTime(2020, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = 1234567895,
                            Photo = "d5a3b4f1-faad-48a5-b438-8109d1f9be69_hasan.jpg",
                            Religion = "Muslim",
                            TeacherName = "Hasan"
                        },
                        new
                        {
                            TeacherId = 2,
                            Address = "Dhaka",
                            DateOfBirth = new DateTime(1995, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Designation = "Software Developer",
                            Email = "rakib100@gmail.com",
                            Gender = "Male",
                            JoiningDate = new DateTime(2020, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = 1254621458,
                            Photo = "d5a3b4f1-faad-48a5-b438-8109d1f9be69_hasan.jpg",
                            Religion = "Muslim",
                            TeacherName = "Rakib"
                        },
                        new
                        {
                            TeacherId = 3,
                            Address = "Dhaka",
                            DateOfBirth = new DateTime(1991, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Designation = "Programmer",
                            Email = "imran100@gmail.com",
                            Gender = "Male",
                            JoiningDate = new DateTime(2020, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = 1201201456,
                            Photo = "d5a3b4f1-faad-48a5-b438-8109d1f9be69_hasan.jpg",
                            Religion = "Muslim",
                            TeacherName = "Imran"
                        },
                        new
                        {
                            TeacherId = 4,
                            Address = "Dhaka",
                            DateOfBirth = new DateTime(1996, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Designation = "ICT Specialist",
                            Email = "masum100@gmail.com",
                            Gender = "Male",
                            JoiningDate = new DateTime(2020, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = 1245154789,
                            Photo = "d5a3b4f1-faad-48a5-b438-8109d1f9be69_hasan.jpg",
                            Religion = "Muslim",
                            TeacherName = "Masum"
                        },
                        new
                        {
                            TeacherId = 5,
                            Address = "Dhaka",
                            DateOfBirth = new DateTime(1995, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Designation = "Developer",
                            Email = "rafi100@gmail.com",
                            Gender = "Male",
                            JoiningDate = new DateTime(2020, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = 1452548514,
                            Photo = "d5a3b4f1-faad-48a5-b438-8109d1f9be69_hasan.jpg",
                            Religion = "Muslim",
                            TeacherName = "Rafi"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ExamStation.Models.QuestionBank", b =>
                {
                    b.HasOne("ExamStation.Models.QuestionGroup", "QuestionGroup")
                        .WithMany()
                        .HasForeignKey("QuestionGroupId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ExamStation.Areas.Identity.Data.ExamStationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ExamStation.Areas.Identity.Data.ExamStationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamStation.Areas.Identity.Data.ExamStationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ExamStation.Areas.Identity.Data.ExamStationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
